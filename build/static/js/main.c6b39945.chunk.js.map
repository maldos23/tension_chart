{"version":3,"sources":["components/charts/index.js","components/TreeMenu/index.js","components/data/index.js","components/sidebar/index.js","components/settings/index.js","App.js","serviceWorker.js","index.js"],"names":["am4core","am4themes_animated","Chart","props","state","scale","data","chart","am4charts","xAxes","push","renderer","grid","template","location","cursorTooltipEnabled","adapter","add","value","target","yAxes","field","name","series","dataFields","valueY","valueX","categoryX","tooltipText","strokeWidth","ev","text","each","item","stroke","hex","tooltip","getFillFromObject","background","fill","label","bullet","bullets","circle","createSeries","legend","cursor","maxTooltipDistance","exporting","menu","this","dispose","id","style","width","height","Component","useTreeItemStyles","makeStyles","theme","root","color","palette","secondary","backgroundColor","grey","content","borderTopRightRadius","spacing","borderBottomRightRadius","paddingRight","fontWeight","typography","fontWeightMedium","fontWeightRegular","group","marginLeft","paddingLeft","expanded","labelRoot","display","alignItems","padding","labelIcon","marginRight","labelText","flexGrow","StyledTreeItem","classes","LabelIcon","labelInfo","bgColor","other","TreeItem","className","Typography","variant","useStyles","maxWidth","GmailTreeView","TreeView","defaultCollapseIcon","ArrowDropDown","defaultExpandIcon","ArrowRight","defaultEndIcon","onClick","handleValue","nodeId","BarChartRounded","AccountTreeRounded","HistoryRounded","PolymerRounded","SettingsRounded","useStyle","margin","Main_Component","Toolbar","borderRadius","Grid","container","xs","TextField","fabButton","paper","boxShadow","border","useState","open","setOpen","IconButton","MenuRounded","SwipeableDrawer","onOpen","onClose","CardContent","Fab","handleNewchart","AddRounded","List","ListItem","button","handleSelection","ListItemIcon","ListItemText","Divider","textAlign","Button","startIcon","SupervisorAccountRounded","md","CardActions","marign","layerGrid","top","card","textfield","CreateCharts","dataSeries","dataChart","App","selection","setSelection","setDataSeries","dialog","setDialog","useTheme","fullscreen","useMediaQuery","breakpoints","down","useEffect","AppBar","Hidden","smUp","openDialog","selectionvalue","TimelineRounded","Tooltip","title","href","GitHub","Card","sm","lg","xsDown","Dialog","fullScreen","DialogTitle","DialogContent","DialogContentText","fullWidth","autoFocus","required","select","MenuItem","Switch","DialogActions","Boolean","window","hostname","match","createMuiTheme","fontFamily","join","ReactDOM","render","ThemeProvider","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.c6b39945.chunk.js","sourcesContent":["import React,{ Component } from 'react';\r\nimport * as am4core from \"@amcharts/amcharts4/core\";\r\nimport * as am4charts from \"@amcharts/amcharts4/charts\";\r\nimport am4themes_animated from \"@amcharts/amcharts4/themes/animated\";\r\n\r\nam4core.useTheme(am4themes_animated);\r\n\r\nclass Chart extends Component {\r\n    \r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            scale:0,\r\n            data:[]\r\n        }  \r\n    }\r\n\r\n    componentDidMount() {\r\n        let chart = am4core.create(\"chartdiv\", am4charts.XYChart);\r\n    \r\n        // Add data\r\n        chart.data = [\r\n            {\r\n                \"index\":\"1\",\r\n                \"x\": 269,\r\n                \"y\": 450,\r\n            }, {\r\n                \"index\":\"2\",\r\n                \"x\": 700,\r\n                \"y\": 758,\r\n            }];\r\n        \r\n        // Creo ejes\r\n        var xAxes = chart.xAxes.push(new am4charts.ValueAxis());\r\n        xAxes.renderer.grid.template.location = 0;\r\n        //xAxes.renderer.minGridDistance = 50;\r\n        xAxes.cursorTooltipEnabled = true;\r\n\r\n        xAxes.adapter.add(\"dataContextValue\",(value,target) => {\r\n            return value\r\n        })\r\n        chart.yAxes.push(new am4charts.ValueAxis());\r\n        // Create series\r\n        function createSeries(field, name) {\r\n            var series = chart.series.push(new am4charts.LineSeries());\r\n            series.dataFields.valueY = field;\r\n            series.dataFields.valueX = \"x\";\r\n            series.dataFields.categoryX= \"index\";\r\n            series.name = name;\r\n            series.tooltipText = \"{valueX}\";\r\n            series.strokeWidth = 2;\r\n            // Set up tooltip\r\n            chart.adapter.add(\"tooltipText\", function(ev) {\r\n            var text = \"[bold]{valueY}[/]\\n\";\r\n            chart.series.each(function(item) {\r\n                text += \"[\" + item.stroke.hex + \"]●[/] \" + item.name + \": {\" + item.dataFields.valueY + \"}\\n\";\r\n            });\r\n            return text;\r\n            });\r\n            \r\n            series.tooltip.getFillFromObject = true;\r\n            series.tooltip.background.fill = am4core.color(\"#fff\");\r\n            series.tooltip.label.fill = am4core.color(\"#00\");\r\n            \r\n            var bullet = series.bullets.push(new am4charts.CircleBullet());\r\n            bullet.circle.stroke = am4core.color(\"#fff\");\r\n            bullet.circle.strokeWidth = 2;\r\n            \r\n            return series;\r\n        }\r\n        \r\n        createSeries(\"y\", \"Real - Material\");\r\n        \r\n        chart.legend = new am4charts.Legend();\r\n        chart.cursor = new am4charts.XYCursor();\r\n        chart.cursor.maxTooltipDistance = 0;\r\n        chart.exporting.menu = new am4core.ExportMenu();\r\n        this.chart = chart;\r\n    }\r\n    \r\n    componentWillUnmount() {\r\n        if (this.chart) {\r\n          this.chart.dispose();\r\n        }\r\n    }\r\n  \r\n    render() {\r\n      return (\r\n        <div id=\"chartdiv\" style={{ width: \"100%\", height: \"500px\" }}></div>\r\n      );\r\n    }\r\n}\r\n\r\nexport default Chart;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { Typography } from '@material-ui/core';\r\nimport { TreeItem, TreeView } from '@material-ui/lab';\r\nimport { Label, Mail, Delete, SupervisorAccount, Info, Forum, LocalOffer, ArrowDropDown, ArrowRight, SettingsRounded, BarChartRounded, AccountTreeRounded, HistoryRounded, PolymerRounded } from '@material-ui/icons';\r\n\r\nconst useTreeItemStyles = makeStyles(theme => ({\r\n    root: {\r\n      color: theme.palette.text.secondary,\r\n      '&:focus > $content': {\r\n        backgroundColor: `var(--tree-view-bg-color, ${theme.palette.grey[400]})`,\r\n        color: 'var(--tree-view-color)',\r\n      },\r\n    },\r\n    content: {\r\n      color: theme.palette.text.secondary,\r\n      borderTopRightRadius: theme.spacing(2),\r\n      borderBottomRightRadius: theme.spacing(2),\r\n      paddingRight: theme.spacing(1),\r\n      fontWeight: theme.typography.fontWeightMedium,\r\n      '$expanded > &': {\r\n        fontWeight: theme.typography.fontWeightRegular,\r\n      },\r\n    },\r\n    group: {\r\n      marginLeft: 0,\r\n      '& $content': {\r\n        paddingLeft: theme.spacing(2),\r\n      },\r\n    },\r\n    expanded: {},\r\n    label: {\r\n      fontWeight: 'inherit',\r\n      color: 'inherit',\r\n    },\r\n    labelRoot: {\r\n      display: 'flex',\r\n      alignItems: 'center',\r\n      padding: theme.spacing(0.5, 0),\r\n    },\r\n    labelIcon: {\r\n      marginRight: theme.spacing(1),\r\n    },\r\n    labelText: {\r\n      fontWeight: 'inherit',\r\n      flexGrow: 1,\r\n    },\r\n  }));\r\n  \r\n  function StyledTreeItem(props) {\r\n    const classes = useTreeItemStyles();\r\n    const { labelText, labelIcon: LabelIcon, labelInfo, color, bgColor, ...other } = props;\r\n  \r\n    return (\r\n      <TreeItem\r\n        label={\r\n          <div className={classes.labelRoot}>\r\n            <LabelIcon color=\"inherit\" className={classes.labelIcon} />\r\n            <Typography variant=\"body2\" className={classes.labelText}>\r\n              {labelText}\r\n            </Typography>\r\n            <Typography variant=\"caption\" color=\"inherit\">\r\n              {labelInfo}\r\n            </Typography>\r\n          </div>\r\n        }\r\n        style={{\r\n          '--tree-view-color': color,\r\n          '--tree-view-bg-color': bgColor,\r\n        }}\r\n        classes={{\r\n          root: classes.root,\r\n          content: classes.content,\r\n          expanded: classes.expanded,\r\n          group: classes.group,\r\n          label: classes.label,\r\n        }}\r\n        {...other}\r\n      />\r\n    );\r\n  }\r\n  \r\n  StyledTreeItem.propTypes = {\r\n    bgColor: PropTypes.string,\r\n    color: PropTypes.string,\r\n    labelIcon: PropTypes.elementType.isRequired,\r\n    labelInfo: PropTypes.string,\r\n    labelText: PropTypes.string.isRequired,\r\n    nodeId: PropTypes.string.isRequired\r\n  };\r\n  \r\n  const useStyles = makeStyles({\r\n    root: {\r\n      flexGrow: 1,\r\n      maxWidth: \"calc(100% - 20px)\",\r\n    },\r\n  });\r\n  \r\n  export default function GmailTreeView(props) {\r\n    const classes = useStyles();\r\n\r\n    return (\r\n      <TreeView\r\n        className={classes.root}\r\n        defaultCollapseIcon={<ArrowDropDown />}\r\n        defaultExpandIcon={<ArrowRight />}\r\n        defaultEndIcon={<div style={{ width: 24 }} />}\r\n        >\r\n        <StyledTreeItem \r\n        onClick={()=>props.handleValue(0)} \r\n        nodeId=\"1\" \r\n        labelText=\"Grafica\" \r\n        labelIcon={BarChartRounded}/>\r\n        <StyledTreeItem \r\n        onClick={()=>props.handleValue(1)} \r\n        nodeId=\"2\" \r\n        labelText=\"Datos\" \r\n        labelIcon={AccountTreeRounded} \r\n        labelInfo=\"120\"/>\r\n        <StyledTreeItem \r\n        onClick={()=>props.handleValue(2)} \r\n        nodeId=\"3\" \r\n        labelText=\"Historial\" \r\n        labelIcon={HistoryRounded} \r\n        labelInfo=\"3\"/>\r\n        <StyledTreeItem \r\n        onClick={()=>props.handleValue(3)} \r\n        nodeId=\"4\" \r\n        labelText=\"Materiales\" \r\n        labelIcon={PolymerRounded} />\r\n        <StyledTreeItem \r\n        onClick={()=>props.handleValue(4)} \r\n        nodeId=\"5\" \r\n        labelText=\"Configuracion\" \r\n        labelIcon={SettingsRounded} />\r\n    </TreeView>\r\n    );\r\n}","import React, { Fragment } from 'react';\r\nimport { Grid, Typography, makeStyles, Toolbar, ExpansionPanel, ExpansionPanelSummary, TextField } from '@material-ui/core';\r\n\r\n\r\n//Creo estilos de menu\r\nconst useStyle = makeStyles(theme => ({\r\n    margin:{\r\n        margin: theme.spacing(1)\r\n    }\r\n}));\r\n\r\nexport default function Main_Component(props){\r\n    const classes = useStyle();\r\n\r\n    return(\r\n        <Fragment>\r\n            <Toolbar>\r\n            <div style={{borderRadius:\"5px\",background:\"linear-gradient(to right, #ee0979, #ff6a00)\", color:\"#FFF\"}}>\r\n                <Typography className={classes.margin} variant=\"h6\">\r\n                    Datos\r\n                </Typography>\r\n            </div>\r\n            </Toolbar>\r\n            <Grid container spacing={2}>\r\n                <Grid item xs={12}>\r\n                    <TextField\r\n                    margin=\"normal\"\r\n                    variant=\"outlined\"\r\n                    label=\"Eje x\"/>\r\n                    <TextField\r\n                    margin=\"normal\"\r\n                    variant=\"outlined\"\r\n                    label=\"Eje Y\"/>\r\n                </Grid>\r\n            </Grid>\r\n        </Fragment>\r\n    )\r\n}","import React, { Fragment, useState } from 'react';\r\nimport { IconButton, SwipeableDrawer, List, ListItem, ListItemText, CardContent, Fab, makeStyles, ListItemIcon, Typography, Button, Divider } from '@material-ui/core';\r\nimport { MenuRounded, AddRounded, BarChartRounded, SettingsRounded, PolymerRounded, HistoryRounded, AccountTreeRounded, SupervisorAccountRounded } from '@material-ui/icons';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst useStyle = makeStyles(theme => ({\r\n    fabButton:{\r\n        background: theme.palette.background.paper,\r\n        boxShadow:\"none\",\r\n        border: \"1px solid #ddd\"\r\n    },\r\n}));\r\n\r\nexport default function Main_Component(props){\r\n    const classes = useStyle();\r\n    const [ open, setOpen ] = useState(false);\r\n\r\n    return(\r\n        <Fragment>\r\n            <IconButton \r\n            onClick={() => setOpen(true)}>\r\n                <MenuRounded style={{\r\n                    color:\"#FFF\",\r\n                    height:35,\r\n                    width:35\r\n                }}/>\r\n            </IconButton>\r\n            <SwipeableDrawer\r\n            open={open}\r\n            onOpen={() => setOpen(true)}\r\n            onClose={() => setOpen(false)}>\r\n                <div style={{width:\"220px\"}}>\r\n                <CardContent>\r\n                <Fab \r\n                onClick={()=> props.handleNewchart(true)}\r\n                className={classes.fabButton} variant=\"extended\">\r\n                  <AddRounded style={{color:\"#ee0979\",height:40,width:40}}/>\r\n                  Nueva Grafica\r\n                </Fab>\r\n                </CardContent>\r\n                <List>\r\n                    <ListItem\r\n                    button \r\n                    onClick={() => {\r\n                        props.handleSelection(0);\r\n                        setOpen(false);\r\n                    }}>\r\n                        <ListItemIcon>\r\n                            <BarChartRounded/>\r\n                        </ListItemIcon>\r\n                        <ListItemText\r\n                        secondary=\"Grafica\"/>\r\n                    </ListItem>\r\n                    <ListItem \r\n                    button \r\n                    onClick={() => {\r\n                        props.handleSelection(1);\r\n                        setOpen(false);\r\n                    }}>\r\n                        <ListItemIcon>\r\n                            <AccountTreeRounded/>\r\n                        </ListItemIcon>\r\n                        <ListItemText\r\n                        secondary=\"Datos\"/>\r\n                    </ListItem>\r\n                    <ListItem\r\n                    button \r\n                    onClick={() => {\r\n                        props.handleSelection(2);\r\n                        setOpen(false);\r\n                    }}>\r\n                        <ListItemIcon>\r\n                            <HistoryRounded/>\r\n                        </ListItemIcon>\r\n                        <ListItemText\r\n                        secondary=\"Historial\"/>\r\n                    </ListItem>\r\n                    <ListItem\r\n                    button \r\n                    onClick={() => {\r\n                        props.handleSelection(3);\r\n                        setOpen(false);\r\n                    }}>\r\n                        <ListItemIcon>\r\n                            <PolymerRounded/>\r\n                        </ListItemIcon>\r\n                        <ListItemText\r\n                        secondary=\"Materiales\"/>\r\n                    </ListItem>\r\n                    <ListItem\r\n                    button \r\n                    onClick={() => {\r\n                        props.handleSelection(4);\r\n                        setOpen(false);\r\n                    }}>\r\n                        <ListItemIcon>\r\n                            <SettingsRounded/>\r\n                        </ListItemIcon>\r\n                        <ListItemText\r\n                        secondary=\"Configuracion\"/>\r\n                    </ListItem>\r\n                </List>\r\n                <Divider/>\r\n                <CardContent style={{textAlign:\"center\"}}>\r\n                <Typography variant=\"caption\">\r\n                  Si deseas guardar datos inicia sesion\r\n                </Typography>\r\n                <br/>\r\n                <br/>\r\n                <Button\r\n                color=\"primary\"\r\n                variant=\"outlined\"\r\n                startIcon={<SupervisorAccountRounded/>}>\r\n                  Iniciar sesion\r\n                </Button>\r\n                <br/>\r\n                <br/>\r\n                <Button\r\n                color=\"secondary\"\r\n                variant=\"outlined\"\r\n                startIcon={<SupervisorAccountRounded/>}>\r\n                  Registrarse\r\n                </Button>\r\n                </CardContent>\r\n                </div>\r\n            </SwipeableDrawer>\r\n        </Fragment>\r\n    )\r\n};\r\n\r\nMain_Component.propTypes = {\r\n    handleSelection: PropTypes.func.isRequired\r\n};","import React, { Fragment } from 'react';\r\nimport { Grid, Typography, makeStyles, Toolbar, CardActions, Button, CardContent } from '@material-ui/core';\r\n\r\n\r\n//Creo estilos de menu\r\nconst useStyle = makeStyles(theme => ({\r\n    margin:{\r\n        margin: theme.spacing(1)\r\n    }\r\n}));\r\n\r\nexport default function Main_Component(props){\r\n    const classes = useStyle();\r\n\r\n    return(\r\n        <Fragment>\r\n            \r\n            <Toolbar>\r\n            <div style={{borderRadius:\"5px\",background:\"linear-gradient(to right, #ee0979, #ff6a00)\", color:\"#FFF\"}}>\r\n                <Typography className={classes.margin} variant=\"h6\">\r\n                    Configuracion\r\n                </Typography>\r\n            </div>\r\n            </Toolbar>\r\n            <CardContent>\r\n            <Grid container spacing={2}>\r\n                <Grid item xs={12} md={3}>\r\n\r\n                </Grid>\r\n            </Grid>\r\n            </CardContent>\r\n            <CardActions>\r\n                <Button>\r\n                    Aplicar\r\n                </Button>\r\n            </CardActions>\r\n        </Fragment>\r\n    )\r\n}","import React, { useState, useEffect } from 'react';\nimport { AppBar, Toolbar, IconButton, Avatar, Tabs, Tab, Typography, CardContent, Card, makeStyles, Grid, Divider, TextField, Button, CardHeader, CardActions, Tooltip, Fab, Link, Hidden, Dialog, useTheme, useMediaQuery, DialogTitle, DialogContentText, DialogContent, DialogActions, MenuItem, Switch, FormControlLabel } from '@material-ui/core';\nimport { MenuOpenRounded, GitHub, TimelineRounded, SettingsApplicationsRounded, MoreRounded, AddRounded, Instagram, SupervisorAccount, SupervisorAccountRounded} from '@material-ui/icons';\n//Importo los componentes requeridos para modificar los componentes\nimport Charts from './components/charts/index';\nimport TreeMenu from './components/TreeMenu/index';\nimport Datamenu from './components/data/index';\nimport SidebarMenu from './components/sidebar/index';\nimport SettingsChart from './components/settings/index';\n\n//Creo estilo de menu para poder utilizar\nconst useStyle = makeStyles(theme => ({\n  marign:{\n    margin: theme.spacing(1)\n  },\n  fabButton:{\n    background: theme.palette.background.paper,\n    boxShadow:\"none\",\n    border: \"1px solid #ddd\"\n  },\n  layerGrid:{\n    top:\"200px\"\n  },\n  card:{\n    height:\"calc(100vh - 90px)\"\n  },\n  textfield:{\n    width:`calc(50% - 20px)`,\n    margin:theme.spacing(1)\n  }\n}));\n\nfunction App() {\n  const [selection, setSelection] = useState(0);\n  const [dataSeries, setDataSeries] = useState([]);\n  const [dialog, setDialog] = useState(false);\n  const classes = useStyle();\n  const theme = useTheme();\n  const fullscreen = useMediaQuery(theme.breakpoints.down(\"sm\"));\n\n  useEffect(() => {\n      setDataSeries([\n    {\n        \"x\": 450,\n        \"y\": 362,\n    }, {\n        \"x\": 269,\n        \"y\": 450,\n    }, {\n        \"x\": 700,\n        \"y\": 758,\n    }]);\n  },[]);\n\n  return (\n    <div>\n     <AppBar style={{background:\"linear-gradient(to right, #606c88, #3f4c6b)\"}}>\n       <Toolbar>\n          <Hidden smUp>\n          <SidebarMenu \n          handleNewchart={(openDialog) => setDialog(openDialog)} \n          handleSelection={(selectionvalue) => setSelection(selectionvalue)}/>\n          </Hidden>\n          <TimelineRounded \n          style={{\n            color:\"#FFF\",\n            height:40,\n            width:40,\n            marginRight:10\n          }}/>\n          <Typography variant=\"h5\">\n            <b>Tension</b> Charts\n          </Typography>\n          <div style={{flexGrow:1}}/>\n          <Tooltip title=\"Ver codigo\">\n          <IconButton href=\"https://github.com/maldos23/tension_chart\">\n          <GitHub style={{color:\"#FFF\"}}/>\n          </IconButton>\n          </Tooltip>\n        </Toolbar>\n     </AppBar>\n     <div style={{height:'70px'}}/>\n      <Card className={classes.card}>\n        <div>\n          <Grid container spacing={2}>\n            <Grid item xs={12} sm={3} lg={2}>\n              <Hidden xsDown>\n                <CardContent>\n                <Fab \n                onClick={()=>setDialog(true)}\n                className={classes.fabButton} \n                variant=\"extended\">\n                  <AddRounded style={{color:\"#ee0979\",height:40,width:40}}/>\n                  Nueva Grafica\n                </Fab>\n                </CardContent>\n                <TreeMenu handleValue={(selectionvalue) => setSelection(selectionvalue)}/>\n                <br/>\n                <Divider/>\n                <CardContent style={{textAlign:\"center\"}}>\n                <Typography variant=\"caption\">\n                  Si deseas guardar datos inicia sesion\n                </Typography>\n                <br/>\n                <br/>\n                <Button\n                color=\"primary\"\n                variant=\"outlined\"\n                startIcon={<SupervisorAccountRounded/>}>\n                  Iniciar sesion\n                </Button>\n                <br/>\n                <br/>\n                <Button\n                color=\"secondary\"\n                variant=\"outlined\"\n                startIcon={<SupervisorAccountRounded/>}>\n                  Registrarse\n                </Button>\n                </CardContent>\n              </Hidden>\n            </Grid>\n            <Grid item xs={12} sm={9} lg={10}>\n            {selection === 0 && <CreateCharts dataChart={dataSeries}/>}\n            {selection === 1 && <Datamenu/>}\n            {selection === 4 && <SettingsChart />}\n            </Grid>\n          </Grid>\n        </div>\n      </Card>\n      <Dialog\n      onClose={() => setDialog(false)}\n      open={dialog}\n      fullScreen={fullscreen}>\n        <DialogTitle\n        style={{\n          background:\"linear-gradient(to right, #ee0979, #ff6a00)\", \n          color:\"#FFF\"\n        }}\n        color=\"primary\">\n          Nueva grafica\n        </DialogTitle>\n        <DialogContent>\n          <DialogContentText>\n            Ingresa las opciones de creacion de grafica\n          </DialogContentText>\n          <TextField\n          fullWidth\n          autoFocus\n          required\n          className={classes.marign} \n          variant=\"outlined\"\n          margin=\"normal\"\n          label=\"Nombre de grafico\"/>\n          <TextField\n          required\n          className={classes.textfield} \n          variant=\"outlined\"\n          margin=\"normal\"\n          label=\"Nombre de Seudo-Material\"/>\n          <TextField\n          select\n          required\n          className={classes.textfield}\n          variant=\"outlined\"\n          margin=\"normal\"\n          label=\"Tipo de grafico\">\n            <MenuItem>\n              Tiempo Deformacion\n            </MenuItem>\n            <MenuItem>\n              Tiempo Carga\n            </MenuItem>\n          </TextField>\n          <TextField\n          select\n          required\n          className={classes.textfield}\n          variant=\"outlined\"\n          margin=\"normal\"\n          label=\"Material\">\n            <MenuItem>\n              Tiempo Deformacion\n            </MenuItem>\n            <MenuItem>\n              Tiempo Carga\n            </MenuItem>\n          </TextField>\n          \n          <Switch>\n            Mutiples ejes\n          </Switch>\n        </DialogContent>\n        <DialogActions>\n          <Button\n          onClick={() => setDialog(false)}\n          color=\"secondary\">\n            Cancelar\n          </Button>\n          <Button\n          variant=\"outlined\"\n          color=\"secondary\">\n            Aplicar\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </div>\n  );\n}\n\nfunction CreateCharts(props){\n  const classes = useStyle();\n\n  return(\n    <div>\n      <Toolbar>\n        <div style={{borderRadius:\"5px\",background:\"linear-gradient(to right, #ee0979, #ff6a00)\", color:\"#FFF\"}}>\n        <Typography className={classes.marign} variant=\"h6\">\n          Vista previa\n        </Typography>\n        </div>\n      </Toolbar>\n      <CardContent>\n      <Charts dataSeries={props.dataChart}/>\n      </CardContent>\n    </div>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { createMuiTheme, ThemeProvider } from '@material-ui/core';\nimport 'typeface-muli';\nimport 'typeface-roboto';\n\nconst theme = createMuiTheme({\n    typography:{\n        fontFamily:[\n            \"roboto\",\n            \"muli\"\n        ].join(\",\")\n    }\n})\n\nReactDOM.render(\n    <ThemeProvider theme={theme}>\n        <div style={{fontFamily:\"roboto\"}}>\n            <App/>\n        </div>\n    </ThemeProvider>\n, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}